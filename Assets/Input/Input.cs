//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""K&M"",
            ""id"": ""15458262-770c-4c88-b3cf-cf41ff343888"",
            ""actions"": [
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""cf6c76ad-1ad7-46c9-b71c-b7a01f6d3cf8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""dedca565-32f6-4d2a-b13e-f4d6d59588ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a6dde921-d703-4a78-87de-fe512d43eb4d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e8e4456-f117-45a6-acc8-3e302d9a7e3f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // K&M
        m_KM = asset.FindActionMap("K&M", throwIfNotFound: true);
        m_KM_Mouse = m_KM.FindAction("Mouse", throwIfNotFound: true);
        m_KM_Click = m_KM.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // K&M
    private readonly InputActionMap m_KM;
    private List<IKMActions> m_KMActionsCallbackInterfaces = new List<IKMActions>();
    private readonly InputAction m_KM_Mouse;
    private readonly InputAction m_KM_Click;
    public struct KMActions
    {
        private @Input m_Wrapper;
        public KMActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouse => m_Wrapper.m_KM_Mouse;
        public InputAction @Click => m_Wrapper.m_KM_Click;
        public InputActionMap Get() { return m_Wrapper.m_KM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KMActions set) { return set.Get(); }
        public void AddCallbacks(IKMActions instance)
        {
            if (instance == null || m_Wrapper.m_KMActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KMActionsCallbackInterfaces.Add(instance);
            @Mouse.started += instance.OnMouse;
            @Mouse.performed += instance.OnMouse;
            @Mouse.canceled += instance.OnMouse;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(IKMActions instance)
        {
            @Mouse.started -= instance.OnMouse;
            @Mouse.performed -= instance.OnMouse;
            @Mouse.canceled -= instance.OnMouse;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(IKMActions instance)
        {
            if (m_Wrapper.m_KMActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKMActions instance)
        {
            foreach (var item in m_Wrapper.m_KMActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KMActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KMActions @KM => new KMActions(this);
    public interface IKMActions
    {
        void OnMouse(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
}
